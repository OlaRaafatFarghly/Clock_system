
Bluepill F103C8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000530  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000660  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000660  08000660  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08000660  08000660  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000660  08000660  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000001c  08000684  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08000684  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001130  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000050a  00000000  00000000  00021175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000138  00000000  00000000  00021680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000e0  00000000  00000000  000217b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022cf  00000000  00000000  00021898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e1c  00000000  00000000  00023b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008cba  00000000  00000000  00025983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002e63d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000360  00000000  00000000  0002e690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000001c 	.word	0x2000001c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000648 	.word	0x08000648

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000020 	.word	0x20000020
 800016c:	08000648 	.word	0x08000648

08000170 <BUZZER_voidTurnOn>:
#include "BUZZER_private.h"
#include "BUZZER_config.h"


void BUZZER_voidTurnOn(PinConfig_t * BUZZER)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	if (NULL != BUZZER)
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d00a      	beq.n	8000194 <BUZZER_voidTurnOn+0x24>
	{
		GPIO_u8PinInit(BUZZER);
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 f822 	bl	80001c8 <GPIO_u8PinInit>

		GPIO_vSetOutputPinValue(BUZZER->PIN_Port, BUZZER->PIN_Number, OUTPUT_HIGH);
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	7818      	ldrb	r0, [r3, #0]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	2201      	movs	r2, #1
 800018e:	4619      	mov	r1, r3
 8000190:	f000 f956 	bl	8000440 <GPIO_vSetOutputPinValue>
	}
	else
	{
		/* Do Nothing */
	}
}
 8000194:	bf00      	nop
 8000196:	3708      	adds	r7, #8
 8000198:	46bd      	mov	sp, r7
 800019a:	bd80      	pop	{r7, pc}

0800019c <BUZZER_voidTurnOff>:


void BUZZER_voidTurnOff(PinConfig_t * BUZZER)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if (NULL != BUZZER)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d00a      	beq.n	80001c0 <BUZZER_voidTurnOff+0x24>
	{
		GPIO_u8PinInit(BUZZER);
 80001aa:	6878      	ldr	r0, [r7, #4]
 80001ac:	f000 f80c 	bl	80001c8 <GPIO_u8PinInit>

		GPIO_vSetOutputPinValue(BUZZER->PIN_Port, BUZZER->PIN_Number, OUTPUT_LOW);
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	7818      	ldrb	r0, [r3, #0]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	785b      	ldrb	r3, [r3, #1]
 80001b8:	2200      	movs	r2, #0
 80001ba:	4619      	mov	r1, r3
 80001bc:	f000 f940 	bl	8000440 <GPIO_vSetOutputPinValue>
	}
	else
	{
		/* Do Nothing */
	}
}
 80001c0:	bf00      	nop
 80001c2:	3708      	adds	r7, #8
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bd80      	pop	{r7, pc}

080001c8 <GPIO_u8PinInit>:
 * @brief the function initializes the GPIO pin according to the input parameters
 * @param[in] copy_ePinConfig : the initialization values of the pin
 * @retval ErrorStatus
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* copy_ePinConfig)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK ;
 80001d0:	2301      	movs	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
	if (copy_ePinConfig != NULL)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	f000 8125 	beq.w	8000426 <GPIO_u8PinInit+0x25e>
	{
		if ((copy_ePinConfig->PIN_Port < INVALID) && (copy_ePinConfig->PIN_Number <= PIN15))
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	2b06      	cmp	r3, #6
 80001e2:	f200 811d 	bhi.w	8000420 <GPIO_u8PinInit+0x258>
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	785b      	ldrb	r3, [r3, #1]
 80001ea:	2b0f      	cmp	r3, #15
 80001ec:	f200 8118 	bhi.w	8000420 <GPIO_u8PinInit+0x258>
		{
			/* Select GPIO Mode: INPUT - OUTPUT 10 MHz- OUTPUT 2 MHz - OUTPUT 50 MHz */
			GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK] &= ~(MODE_MASK                   << ((copy_ePinConfig->PIN_Number %MODEMOD_MASK) *MODE_PIN_ACCESS)); // clear mode bits
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	461a      	mov	r2, r3
 80001f6:	4b91      	ldr	r3, [pc, #580]	; (800043c <GPIO_u8PinInit+0x274>)
 80001f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80001fc:	687a      	ldr	r2, [r7, #4]
 80001fe:	7852      	ldrb	r2, [r2, #1]
 8000200:	08d2      	lsrs	r2, r2, #3
 8000202:	b2d2      	uxtb	r2, r2
 8000204:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	785b      	ldrb	r3, [r3, #1]
 800020c:	f003 0307 	and.w	r3, r3, #7
 8000210:	009b      	lsls	r3, r3, #2
 8000212:	2103      	movs	r1, #3
 8000214:	fa01 f303 	lsl.w	r3, r1, r3
 8000218:	43db      	mvns	r3, r3
 800021a:	4618      	mov	r0, r3
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	4619      	mov	r1, r3
 8000222:	4b86      	ldr	r3, [pc, #536]	; (800043c <GPIO_u8PinInit+0x274>)
 8000224:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	7849      	ldrb	r1, [r1, #1]
 800022c:	08c9      	lsrs	r1, r1, #3
 800022e:	b2c9      	uxtb	r1, r1
 8000230:	4002      	ands	r2, r0
 8000232:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK] |=  ((copy_ePinConfig->PIN_Mode) << ((copy_ePinConfig->PIN_Number %MODEMOD_MASK) *MODE_PIN_ACCESS));
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	461a      	mov	r2, r3
 800023c:	4b7f      	ldr	r3, [pc, #508]	; (800043c <GPIO_u8PinInit+0x274>)
 800023e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	7852      	ldrb	r2, [r2, #1]
 8000246:	08d2      	lsrs	r2, r2, #3
 8000248:	b2d2      	uxtb	r2, r2
 800024a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	789b      	ldrb	r3, [r3, #2]
 8000252:	4619      	mov	r1, r3
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	785b      	ldrb	r3, [r3, #1]
 8000258:	f003 0307 	and.w	r3, r3, #7
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	fa01 f303 	lsl.w	r3, r1, r3
 8000262:	4618      	mov	r0, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4619      	mov	r1, r3
 800026a:	4b74      	ldr	r3, [pc, #464]	; (800043c <GPIO_u8PinInit+0x274>)
 800026c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000270:	6879      	ldr	r1, [r7, #4]
 8000272:	7849      	ldrb	r1, [r1, #1]
 8000274:	08c9      	lsrs	r1, r1, #3
 8000276:	b2c9      	uxtb	r1, r1
 8000278:	4302      	orrs	r2, r0
 800027a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			
			/* Select output type and speed in case of OUTPUT / AF  */
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	789b      	ldrb	r3, [r3, #2]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d007      	beq.n	8000296 <GPIO_u8PinInit+0xce>
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_2_MHz ) ||
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	789b      	ldrb	r3, [r3, #2]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 800028a:	2b02      	cmp	r3, #2
 800028c:	d003      	beq.n	8000296 <GPIO_u8PinInit+0xce>
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_50_MHz)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	789b      	ldrb	r3, [r3, #2]
				(copy_ePinConfig->PIN_Mode == Output_mode_max_speed_2_MHz ) ||
 8000292:	2b03      	cmp	r3, #3
 8000294:	d176      	bne.n	8000384 <GPIO_u8PinInit+0x1bc>
				 )
			{
				/* select output type General_purpose_output_push_pull - General_purpose_output_Open_drain - Alternate_function_output_Push_pull - Alternate_function_output_Open_drain */
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  &= ~(CNF_MASK				          <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) ); // clear mode bits
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	461a      	mov	r2, r3
 800029c:	4b67      	ldr	r3, [pc, #412]	; (800043c <GPIO_u8PinInit+0x274>)
 800029e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	7852      	ldrb	r2, [r2, #1]
 80002a6:	08d2      	lsrs	r2, r2, #3
 80002a8:	b2d2      	uxtb	r2, r2
 80002aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	785b      	ldrb	r3, [r3, #1]
 80002b2:	f003 0307 	and.w	r3, r3, #7
 80002b6:	009b      	lsls	r3, r3, #2
 80002b8:	3302      	adds	r3, #2
 80002ba:	2103      	movs	r1, #3
 80002bc:	fa01 f303 	lsl.w	r3, r1, r3
 80002c0:	43db      	mvns	r3, r3
 80002c2:	4618      	mov	r0, r3
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	4619      	mov	r1, r3
 80002ca:	4b5c      	ldr	r3, [pc, #368]	; (800043c <GPIO_u8PinInit+0x274>)
 80002cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80002d0:	6879      	ldr	r1, [r7, #4]
 80002d2:	7849      	ldrb	r1, [r1, #1]
 80002d4:	08c9      	lsrs	r1, r1, #3
 80002d6:	b2c9      	uxtb	r1, r1
 80002d8:	4002      	ands	r2, r0
 80002da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  |=  (copy_ePinConfig->PIN_OutputType <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) );
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	781b      	ldrb	r3, [r3, #0]
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b55      	ldr	r3, [pc, #340]	; (800043c <GPIO_u8PinInit+0x274>)
 80002e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	7852      	ldrb	r2, [r2, #1]
 80002ee:	08d2      	lsrs	r2, r2, #3
 80002f0:	b2d2      	uxtb	r2, r2
 80002f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	791b      	ldrb	r3, [r3, #4]
 80002fa:	4619      	mov	r1, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	f003 0307 	and.w	r3, r3, #7
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	3302      	adds	r3, #2
 8000308:	fa01 f303 	lsl.w	r3, r1, r3
 800030c:	4618      	mov	r0, r3
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	781b      	ldrb	r3, [r3, #0]
 8000312:	4619      	mov	r1, r3
 8000314:	4b49      	ldr	r3, [pc, #292]	; (800043c <GPIO_u8PinInit+0x274>)
 8000316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800031a:	6879      	ldr	r1, [r7, #4]
 800031c:	7849      	ldrb	r1, [r1, #1]
 800031e:	08c9      	lsrs	r1, r1, #3
 8000320:	b2c9      	uxtb	r1, r1
 8000322:	4302      	orrs	r2, r0
 8000324:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				
				GPIO_PORT[copy_ePinConfig->PIN_Port]->ODR  &= ~(0b1				            <<copy_ePinConfig->PIN_Number ); // clear mode bits
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	4b43      	ldr	r3, [pc, #268]	; (800043c <GPIO_u8PinInit+0x274>)
 8000330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	785b      	ldrb	r3, [r3, #1]
 800033a:	4619      	mov	r1, r3
 800033c:	2301      	movs	r3, #1
 800033e:	408b      	lsls	r3, r1
 8000340:	43db      	mvns	r3, r3
 8000342:	4619      	mov	r1, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	4b3c      	ldr	r3, [pc, #240]	; (800043c <GPIO_u8PinInit+0x274>)
 800034c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000350:	400a      	ands	r2, r1
 8000352:	60da      	str	r2, [r3, #12]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->ODR  |=  (copy_ePinConfig->PIN_OValue	<<copy_ePinConfig->PIN_Number );
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	461a      	mov	r2, r3
 800035a:	4b38      	ldr	r3, [pc, #224]	; (800043c <GPIO_u8PinInit+0x274>)
 800035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000360:	68da      	ldr	r2, [r3, #12]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	795b      	ldrb	r3, [r3, #5]
 8000366:	4619      	mov	r1, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	785b      	ldrb	r3, [r3, #1]
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
 8000370:	4619      	mov	r1, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	4b30      	ldr	r3, [pc, #192]	; (800043c <GPIO_u8PinInit+0x274>)
 800037a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800037e:	430a      	orrs	r2, r1
 8000380:	60da      	str	r2, [r3, #12]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 8000382:	e053      	b.n	800042c <GPIO_u8PinInit+0x264>
				
				
			}
				/* select input type : Analog mode - Floating input - Input with pull-up / pull-down - Reserved */

			else if (copy_ePinConfig->PIN_Mode == INPUT)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	789b      	ldrb	r3, [r3, #2]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d14f      	bne.n	800042c <GPIO_u8PinInit+0x264>
			{
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  &= ~(CNF_MASK				         <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) ); // clear mode bits
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	461a      	mov	r2, r3
 8000392:	4b2a      	ldr	r3, [pc, #168]	; (800043c <GPIO_u8PinInit+0x274>)
 8000394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000398:	687a      	ldr	r2, [r7, #4]
 800039a:	7852      	ldrb	r2, [r2, #1]
 800039c:	08d2      	lsrs	r2, r2, #3
 800039e:	b2d2      	uxtb	r2, r2
 80003a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	785b      	ldrb	r3, [r3, #1]
 80003a8:	f003 0307 	and.w	r3, r3, #7
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	3302      	adds	r3, #2
 80003b0:	2103      	movs	r1, #3
 80003b2:	fa01 f303 	lsl.w	r3, r1, r3
 80003b6:	43db      	mvns	r3, r3
 80003b8:	4618      	mov	r0, r3
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	4619      	mov	r1, r3
 80003c0:	4b1e      	ldr	r3, [pc, #120]	; (800043c <GPIO_u8PinInit+0x274>)
 80003c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80003c6:	6879      	ldr	r1, [r7, #4]
 80003c8:	7849      	ldrb	r1, [r1, #1]
 80003ca:	08c9      	lsrs	r1, r1, #3
 80003cc:	b2c9      	uxtb	r1, r1
 80003ce:	4002      	ands	r2, r0
 80003d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				GPIO_PORT[copy_ePinConfig->PIN_Port]->CR[copy_ePinConfig->PIN_Number /MODEMOD_MASK]  |=  (copy_ePinConfig->PIN_InputType <<(((copy_ePinConfig->PIN_Number %CNFMOD_MASK) *MODE_PIN_ACCESS) +MODE_PIN_ACCESS_Addition) );
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b18      	ldr	r3, [pc, #96]	; (800043c <GPIO_u8PinInit+0x274>)
 80003dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	7852      	ldrb	r2, [r2, #1]
 80003e4:	08d2      	lsrs	r2, r2, #3
 80003e6:	b2d2      	uxtb	r2, r2
 80003e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	78db      	ldrb	r3, [r3, #3]
 80003f0:	4619      	mov	r1, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	785b      	ldrb	r3, [r3, #1]
 80003f6:	f003 0307 	and.w	r3, r3, #7
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	3302      	adds	r3, #2
 80003fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000402:	4618      	mov	r0, r3
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4619      	mov	r1, r3
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <GPIO_u8PinInit+0x274>)
 800040c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000410:	6879      	ldr	r1, [r7, #4]
 8000412:	7849      	ldrb	r1, [r1, #1]
 8000414:	08c9      	lsrs	r1, r1, #3
 8000416:	b2c9      	uxtb	r1, r1
 8000418:	4302      	orrs	r2, r0
 800041a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 800041e:	e005      	b.n	800042c <GPIO_u8PinInit+0x264>

			}
		}
		else
		{
			Local_u8ErrorState = NOK;
 8000420:	2302      	movs	r3, #2
 8000422:	73fb      	strb	r3, [r7, #15]
 8000424:	e003      	b.n	800042e <GPIO_u8PinInit+0x266>
		}
	}
	else
	{
		Local_u8ErrorState = NULL_PTR_ERR;
 8000426:	2303      	movs	r3, #3
 8000428:	73fb      	strb	r3, [r7, #15]
 800042a:	e000      	b.n	800042e <GPIO_u8PinInit+0x266>
			if ((copy_ePinConfig->PIN_Mode == Output_mode_max_speed_10_MHz) ||
 800042c:	bf00      	nop
	}

	return Local_u8ErrorState;
 800042e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000430:	4618      	mov	r0, r3
 8000432:	3714      	adds	r7, #20
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000

08000440 <GPIO_vSetOutputPinValue>:
 * @param[in] copy_GPIO_ODR : the pin number, get options @GPIO_ODR_t ENUM
 * @retval ErrorStatus
 */

uint8_t GPIO_vSetOutputPinValue(GPIO_Port_t copy_eGPIO_Port,GPIO_Pin_t copy_eGPIO_Pin,GPIO_ODR_t copy_eGPIO_ODR)
{
 8000440:	b480      	push	{r7}
 8000442:	b085      	sub	sp, #20
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	460b      	mov	r3, r1
 800044c:	71bb      	strb	r3, [r7, #6]
 800044e:	4613      	mov	r3, r2
 8000450:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK ;
 8000452:	2301      	movs	r3, #1
 8000454:	73fb      	strb	r3, [r7, #15]
	if ((copy_eGPIO_Port < INVALID) && (copy_eGPIO_Pin <= PIN15))
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	2b06      	cmp	r3, #6
 800045a:	d82d      	bhi.n	80004b8 <GPIO_vSetOutputPinValue+0x78>
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	2b0f      	cmp	r3, #15
 8000460:	d82a      	bhi.n	80004b8 <GPIO_vSetOutputPinValue+0x78>
	{
		if (copy_eGPIO_ODR == OUTPUT_LOW || copy_eGPIO_ODR == OUTPUT_HIGH)
 8000462:	797b      	ldrb	r3, [r7, #5]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d002      	beq.n	800046e <GPIO_vSetOutputPinValue+0x2e>
 8000468:	797b      	ldrb	r3, [r7, #5]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d121      	bne.n	80004b2 <GPIO_vSetOutputPinValue+0x72>
		{
			GPIO_PORT[copy_eGPIO_Port]->ODR &= ~(ODR_MASK			 << (copy_eGPIO_Pin)); // clear mode bits
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	4a15      	ldr	r2, [pc, #84]	; (80004c8 <GPIO_vSetOutputPinValue+0x88>)
 8000472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000476:	68da      	ldr	r2, [r3, #12]
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f303 	lsl.w	r3, r1, r3
 8000480:	43db      	mvns	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	4910      	ldr	r1, [pc, #64]	; (80004c8 <GPIO_vSetOutputPinValue+0x88>)
 8000488:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800048c:	4002      	ands	r2, r0
 800048e:	60da      	str	r2, [r3, #12]
			GPIO_PORT[copy_eGPIO_Port]->ODR |=  (copy_eGPIO_ODR 	 	 << (copy_eGPIO_Pin));
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <GPIO_vSetOutputPinValue+0x88>)
 8000494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000498:	68da      	ldr	r2, [r3, #12]
 800049a:	7979      	ldrb	r1, [r7, #5]
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	fa01 f303 	lsl.w	r3, r1, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	4908      	ldr	r1, [pc, #32]	; (80004c8 <GPIO_vSetOutputPinValue+0x88>)
 80004a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004ac:	4302      	orrs	r2, r0
 80004ae:	60da      	str	r2, [r3, #12]
		if (copy_eGPIO_ODR == OUTPUT_LOW || copy_eGPIO_ODR == OUTPUT_HIGH)
 80004b0:	e004      	b.n	80004bc <GPIO_vSetOutputPinValue+0x7c>
		}
		else
		{
			Local_u8ErrorState = NOK;
 80004b2:	2302      	movs	r3, #2
 80004b4:	73fb      	strb	r3, [r7, #15]
		if (copy_eGPIO_ODR == OUTPUT_LOW || copy_eGPIO_ODR == OUTPUT_HIGH)
 80004b6:	e001      	b.n	80004bc <GPIO_vSetOutputPinValue+0x7c>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 80004bc:	7bfb      	ldrb	r3, [r7, #15]

}
 80004be:	4618      	mov	r0, r3
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000000 	.word	0x20000000

080004cc <RCC_APB2_enableClock>:
void RCC_APB1_EnableClock(uint8_t Pref);

void RCC_APB1_DisableClock(uint8_t Pref);


void RCC_APB2_enableClock(uint8_t Pref){
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

	RCC->APB2ENR|= 0b1<<Pref;
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <RCC_APB2_enableClock+0x28>)
 80004d8:	699b      	ldr	r3, [r3, #24]
 80004da:	79fa      	ldrb	r2, [r7, #7]
 80004dc:	2101      	movs	r1, #1
 80004de:	fa01 f202 	lsl.w	r2, r1, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <RCC_APB2_enableClock+0x28>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6193      	str	r3, [r2, #24]

}
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000

080004f8 <STK_Delay_ms>:
	while(READ_BIT(STK->STK_CTRL, COUNTFLAG) == 0);

	STK->STK_CTRL = 0;  /* Close the timer */
}
uint8_t STK_Delay_ms(uint16_t time_ms)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]
	STK->STK_LOAD = 0 ;
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <STK_Delay_ms+0x68>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(STK->STK_CTRL, ENABLE);  /* make sure timer is OFF */
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <STK_Delay_ms+0x68>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a14      	ldr	r2, [pc, #80]	; (8000560 <STK_Delay_ms+0x68>)
 800050e:	f023 0301 	bic.w	r3, r3, #1
 8000512:	6013      	str	r3, [r2, #0]
	STK->STK_LOAD = (time_ms*1000) - 1;
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800051a:	fb02 f303 	mul.w	r3, r2, r3
 800051e:	1e5a      	subs	r2, r3, #1
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <STK_Delay_ms+0x68>)
 8000522:	605a      	str	r2, [r3, #4]

	CLEAR_BIT(STK->STK_CTRL, CLKSOURCE); /* CLOCK SOURSE SELECTED AHB/8  */
 8000524:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <STK_Delay_ms+0x68>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <STK_Delay_ms+0x68>)
 800052a:	f023 0304 	bic.w	r3, r3, #4
 800052e:	6013      	str	r3, [r2, #0]

	SET_BIT(STK->STK_CTRL, ENABLE);
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <STK_Delay_ms+0x68>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a0a      	ldr	r2, [pc, #40]	; (8000560 <STK_Delay_ms+0x68>)
 8000536:	f043 0301 	orr.w	r3, r3, #1
 800053a:	6013      	str	r3, [r2, #0]

	while (READ_BIT(STK->STK_CTRL, COUNTFLAG) == 0);
 800053c:	bf00      	nop
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <STK_Delay_ms+0x68>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0f8      	beq.n	800053e <STK_Delay_ms+0x46>

	STK->STK_CTRL = 0;  /* Close the timer */
 800054c:	4b04      	ldr	r3, [pc, #16]	; (8000560 <STK_Delay_ms+0x68>)
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
}
 8000552:	bf00      	nop
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000e010 	.word	0xe000e010

08000564 <main>:
#include "../Inc/HAL/LED/LED_interface.h"
#include "../Inc/HAL/LED/LED_private.h"


int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
	/*Enable clock on GPIOA*/
	RCC_APB2_enableClock(2u);
 800056a:	2002      	movs	r0, #2
 800056c:	f7ff ffae 	bl	80004cc <RCC_APB2_enableClock>

	/*Configure pinA5 as: output, Pushpull, Nopull, LowSpeed*/
	PinConfig_t LedPin =
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	f8c3 2003 	str.w	r2, [r3, #3]
 800057a:	2301      	movs	r3, #1
 800057c:	707b      	strb	r3, [r7, #1]
 800057e:	2301      	movs	r3, #1
 8000580:	70bb      	strb	r3, [r7, #2]
			.PIN_Mode = Output_mode_max_speed_10_MHz,
			.PIN_LCKSTS = UNLOCKED,
			.PIN_OValue = OUTPUT_LOW,
	};

	GPIO_u8PinInit(&LedPin);
 8000582:	463b      	mov	r3, r7
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe1f 	bl	80001c8 <GPIO_u8PinInit>

	/*high on the pin to turn on the user led*/
	while(1)
	{
		BUZZER_voidTurnOn(&LedPin);
 800058a:	463b      	mov	r3, r7
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff fdef 	bl	8000170 <BUZZER_voidTurnOn>
		STK_Delay_ms(1000);
 8000592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000596:	f7ff ffaf 	bl	80004f8 <STK_Delay_ms>
		BUZZER_voidTurnOff(&LedPin);
 800059a:	463b      	mov	r3, r7
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fdfd 	bl	800019c <BUZZER_voidTurnOff>
		STK_Delay_ms(1000);
 80005a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a6:	f7ff ffa7 	bl	80004f8 <STK_Delay_ms>
	{
 80005aa:	e7ee      	b.n	800058a <main+0x26>

080005ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ac:	480d      	ldr	r0, [pc, #52]	; (80005e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005b6:	490d      	ldr	r1, [pc, #52]	; (80005ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80005b8:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <LoopForever+0xe>)
  movs r3, #0
 80005ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005bc:	e002      	b.n	80005c4 <LoopCopyDataInit>

080005be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c2:	3304      	adds	r3, #4

080005c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005c8:	d3f9      	bcc.n	80005be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ca:	4a0a      	ldr	r2, [pc, #40]	; (80005f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005cc:	4c0a      	ldr	r4, [pc, #40]	; (80005f8 <LoopForever+0x16>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d0:	e001      	b.n	80005d6 <LoopFillZerobss>

080005d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d4:	3204      	adds	r2, #4

080005d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005d8:	d3fb      	bcc.n	80005d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005da:	f000 f811 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005de:	f7ff ffc1 	bl	8000564 <main>

080005e2 <LoopForever>:

LoopForever:
  b LoopForever
 80005e2:	e7fe      	b.n	80005e2 <LoopForever>
  ldr   r0, =_estack
 80005e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80005f0:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 80005f4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80005f8:	20000038 	.word	0x20000038

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	2600      	movs	r6, #0
 8000604:	4d0c      	ldr	r5, [pc, #48]	; (8000638 <__libc_init_array+0x38>)
 8000606:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000608:	1b64      	subs	r4, r4, r5
 800060a:	10a4      	asrs	r4, r4, #2
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	f000 f81a 	bl	8000648 <_init>
 8000614:	2600      	movs	r6, #0
 8000616:	4d0a      	ldr	r5, [pc, #40]	; (8000640 <__libc_init_array+0x40>)
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <__libc_init_array+0x44>)
 800061a:	1b64      	subs	r4, r4, r5
 800061c:	10a4      	asrs	r4, r4, #2
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
